#!/usr/bin/env php
<?php

if (version_compare("8.0.0", PHP_VERSION, ">")) {
    fwrite(STDERR, "Code Generator requires PHP 8 or higher" . PHP_EOL);
    exit(1);
}
foreach ([
             __DIR__ . '/vendor/autoload.php',
             __DIR__ . '/../autoload.php',
             __DIR__ . '/../../autoload.php',
             __DIR__ . '/../../vendor/autoload.php',
         ] as $autoloadPath) {
    if (!file_exists($autoloadPath)) {
        continue;
    }
    /** @var \Composer\Autoload\ClassLoader $composer */
    $composer = require $autoloadPath;
}

if (empty($composer)) {
    fwrite(STDERR, "Please run 'composer install' to ensure there is a ClassLoader inside 'vendor/autoload.php'" . PHP_EOL);
    exit(1);
}

use RobertBakker\PhpCodeGenerator\CodeWriter;
use RobertBakker\PhpCodeGenerator\Command\ServiceCommand;
use Symfony\Component\Console\Application;
use Symfony\Component\Dotenv\Dotenv;

(new Dotenv())->bootEnv(__DIR__ . '/.env');
$defaultNamespace = $_ENV["CODE_GENERATOR_NAMESPACE"];

$application = new Application();
$application->setName("PHP Code Generator");

$codeWriter = new CodeWriter($composer);
$application->add(new ServiceCommand($codeWriter, $defaultNamespace));

$application->run();
